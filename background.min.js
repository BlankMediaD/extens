let popupWindowId = null;
let currentQuery = "";
let currentStart = 0;
let isLastPage = false;
let totalResults = 0;
let isActive = false;
let isProLicenseActive = true;
const MAX_TOTAL_RESULTS = 500;
let leadGenProcessCount = 0;
let searchTabIds = [];
let captchaDetected = false;
let lastSearchQuery = "";
let lastSearchStart = 0;
let captchaTabId = null;
let captchaAutoSolveAttempted = false;
chrome.runtime.onMessage.addListener(((request, sender, sendResponse) => {
    if (request.action === "captchaDetected") {
        captchaDetected = true;
        captchaTabId = sender.tab.id;
        captchaAutoSolveAttempted = false;
        lastSearchQuery = currentQuery;
        lastSearchStart = currentStart;
        isActive = false;
        chrome.runtime.sendMessage({
            action: "captchaFound",
            url: request.url,
            tabId: sender.tab.id,
            autoSolving: true
        });
        chrome.tabs.update(sender.tab.id, {
            active: true
        })
    } else if (request.action === "captchaClickAttempt") {
        captchaAutoSolveAttempted = true;
        chrome.runtime.sendMessage({
            action: "captchaAutoClickAttempt"
        })
    } else if (request.action === "captchaAutoSolveSuccess") {
        captchaDetected = false;
        captchaAutoSolveAttempted = false;
        chrome.runtime.sendMessage({
            action: "captchaAutoSolveSuccess"
        });
        if (lastSearchQuery) {
            setTimeout((() => {
                isActive = true;
                currentQuery = lastSearchQuery;
                currentStart = lastSearchStart;
                chrome.runtime.sendMessage({
                    action: "scrapingResumed"
                });
                searchNextPage()
            }), 2e3)
        }
    } else if (request.action === "captchaAutoSolveFailed") {
        chrome.runtime.sendMessage({
            action: "captchaAutoSolveFailed",
            tabId: captchaTabId
        })
    } else if (request.action === "captchaSolved") {
        if (lastSearchQuery) {
            captchaDetected = false;
            isActive = true;
            currentQuery = lastSearchQuery;
            currentStart = lastSearchStart;
            chrome.runtime.sendMessage({
                action: "scrapingResumed"
            });
            setTimeout(searchNextPage, 1e3)
        }
    } else if (request.action === "searchAndScrape") {
        if (request.dashboardTabId) {
            popupWindowId = request.dashboardTabId
        }
        currentQuery = request.query;
        currentStart = 0;
        isLastPage = false;
        totalResults = 0;
        isActive = true;
        if (request.searchTabId) {
            const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(currentQuery)}&num=100&start=${currentStart}`;
            chrome.tabs.update(request.searchTabId, {
                url: searchUrl
            });
            if (!searchTabIds.includes(request.searchTabId)) {
                searchTabIds.push(request.searchTabId)
            }
            if (popupWindowId) {
                chrome.tabs.update(popupWindowId, {
                    active: true
                })
            }
        } else {
            searchNextPage()
        }
    } else if (request.action === "scrapingResults") {
        if (!isActive) return;
        if (request.results.length > 0) {
            totalResults += request.results.length;
            chrome.runtime.sendMessage({
                action: "displayResults",
                results: request.results,
                isProLicense: isProLicenseActive
            })
        }
        if (!isLastPage && totalResults < MAX_TOTAL_RESULTS) {
            setTimeout(searchNextPage, 5e3)
        } else {
            chrome.runtime.sendMessage({
                action: "scrapingComplete"
            });
            resetState()
        }
    } else if (request.action === "noMoreResults") {
        isLastPage = true;
        chrome.runtime.sendMessage({
            action: "scrapingComplete"
        });
        resetState()
    } else if (request.action === "stopScraping") {
        resetState()
    }
}));

function searchNextPage() {
    if (!isActive) return;
    chrome.tabs.query({
        url: "https://www.google.com/search*"
    }, (tabs => {
        const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(currentQuery)}&num=100&start=${currentStart}`;
        if (tabs.length > 0) {
            chrome.tabs.update(tabs[0].id, {
                url: searchUrl
            });
            if (!searchTabIds.includes(tabs[0].id)) {
                searchTabIds.push(tabs[0].id)
            }
        } else {
            chrome.tabs.create({
                url: searchUrl,
                active: false
            }, (tab => {
                searchTabIds.push(tab.id)
            }))
        }
        if (popupWindowId) {
            chrome.tabs.update(popupWindowId, {
                active: true
            })
        }
        currentStart += 100
    }))
}

function resetState() {
    isActive = false;
    currentQuery = "";
    currentStart = 0;
    isLastPage = false;
    totalResults = 0;
    popupWindowId = null;
    if (!captchaDetected) {
        closeSearchTabs();
        searchTabIds = captchaDetected ? [captchaTabId] : []
    } else {
        closeSearchTabs()
    }
}

function closeSearchTabs() {
    if (searchTabIds.length > 0) {
        console.log("Closing search tabs:", searchTabIds);
        searchTabIds.forEach((tabId => {
            if (captchaDetected && tabId === captchaTabId) {
                console.log("Keeping CAPTCHA tab open:", tabId);
                return
            }
            try {
                chrome.tabs.remove(tabId, (() => {
                    if (chrome.runtime.lastError) {
                        console.log("Error closing tab:", chrome.runtime.lastError)
                    }
                }))
            } catch (error) {
                console.error("Error closing tab:", error)
            }
        }))
    }
    if (captchaDetected && captchaTabId) {
        searchTabIds = searchTabIds.filter((id => id === captchaTabId))
    } else {
        searchTabIds = []
    }
}
chrome.tabs.onUpdated.addListener(((tabId, changeInfo, tab) => {
    if (captchaDetected && captchaTabId === tabId && changeInfo.status === "complete") {
        if (tab.url.includes("google.com/search") && !tab.url.includes("captcha")) {
            chrome.runtime.sendMessage({
                action: "captchaSolved"
            });
            captchaDetected = false;
            captchaTabId = null;
            setTimeout((() => {
                isActive = true;
                currentQuery = lastSearchQuery;
                currentStart = lastSearchStart;
                chrome.runtime.sendMessage({
                    action: "scrapingResumed"
                });
                searchNextPage()
            }), 2e3)
        }
    }
    if (isActive && changeInfo.status === "complete" && tab.url.includes("google.com/search")) {
        chrome.scripting.executeScript({
            target: {
                tabId: tabId
            },
            files: ["content.js"]
        }, (() => {
            chrome.tabs.sendMessage(tabId, {
                action: "scrape"
            });
            if (popupWindowId) {
                setTimeout((() => {
                    chrome.tabs.update(popupWindowId, {
                        active: true
                    })
                }), 500)
            }
        }))
    }
}));
chrome.runtime.onConnect.addListener((function(port) {
    if (port.name === "popup") {
        port.onDisconnect.addListener((function() {
            resetState()
        }))
    }
}));
chrome.action.onClicked.addListener((tab => {
    chrome.tabs.create({
        url: "dashboard.html"
    })
}));
